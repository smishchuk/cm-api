import {Entity, model, property} from '@loopback/repository';

@model({
  settings: {
	  idInjection: false, 
	  postgresql: {schema: 'cmdb', table: 'instance'}
  }
})
export class Instance extends Entity {
  @property({
    type: 'string',
    required: false,
    jsonSchema: {nullable: false},    
    id: 1,
	description: "autogenerated record GUID",
    postgresql: {columnName: 'instance_uid', dataType: 'uuid', dataLength: null, dataPrecision: null, dataScale: null, nullable: 'NO', generated: true},
  })
  instanceUid: string;

  @property({
    type: 'string',
    jsonSchema: {nullable: true},
    length: 255,
    description: 'readable name, e.g. Production PostgreSQL for Service Desk',
    postgresql: {columnName: 'display_name', dataType: 'character varying', dataLength: 255, dataPrecision: null, dataScale: null, nullable: 'YES', generated: undefined},
  })
  displayName?: string;

  @property({
    type: 'number',
    required: true,
    jsonSchema: {nullable: false},
    scale: 0,
    description: "refers to svc.svc_id from service catalog. DO NOT CHANGE (TODO: protect from change)",
    postgresql: {columnName: 'service_id', dataType: 'integer', dataLength: null, dataPrecision: null, dataScale: 0, nullable: 'NO', generated: undefined},
  })
  serviceId: number;

  @property({
    type: 'number',
    jsonSchema: {nullable: true},
    scale: 0,
    description: "refers to specification of contract",
    postgresql: {columnName: 'specification_item_id', dataType: 'integer', dataLength: null, dataPrecision: null, dataScale: 0, nullable: 'YES', generated: undefined},
  })
  specificationItemId?: number;

  @property({
    type: 'string',
    jsonSchema: {nullable: true},
    description: "long description",
    postgresql: {columnName: 'descr', dataType: 'text', dataLength: null, dataPrecision: null, dataScale: null, nullable: 'YES', generated: undefined},
  })
  descr?: string;

@property({
    type: 'date',
    jsonSchema: {nullable: false},    
    postgresql: {columnName: 'dt_created', dataType: 'timestamp with time zone', dataLength: null, dataPrecision: null, dataScale: null, nullable: 'NO', generated: true},
  })
  dtCreated: string;

  @property({
    type: 'number',
    jsonSchema: {nullable: true},
    scale: 0,    
    postgresql: {columnName: 'creator_id', dataType: 'integer', dataLength: null, dataPrecision: null, dataScale: 0, nullable: 'YES', generated: undefined},
  })
  creatorId?: number;

  @property({
    type: 'date',
    jsonSchema: {nullable: false},    
    postgresql: {columnName: 'dt_updated', dataType: 'timestamp with time zone', dataLength: null, dataPrecision: null, dataScale: null, nullable: 'NO', generated: true},
  })
  dtUpdated: string;

  @property({
    type: 'number',
    jsonSchema: {nullable: true},
    scale: 0,
    
    postgresql: {columnName: 'updater_id', dataType: 'integer', dataLength: null, dataPrecision: null, dataScale: 0, nullable: 'YES', generated: undefined},
  })
  updaterId?: number;

  // Define well-known properties here

  // Indexer property to allow additional data
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  [prop: string]: any;

  constructor(data?: Partial<Instance>) {
    super(data);
  }
}

export interface InstanceRelations {
  // describe navigational properties here
}

export type InstanceWithRelations = Instance & InstanceRelations;
