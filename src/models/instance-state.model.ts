import {Entity, model, property} from '@loopback/repository';

@model({
  settings: {idInjection: false, postgresql: {schema: 'cmdb', table: 'instance_state'}}
})
export class InstanceState extends Entity {
  @property({
    type: 'string',
    required: false,
    jsonSchema: {nullable: false},
    description: "autogenerated record GUID",
    id: 1,
    postgresql: {columnName: 'instance_state_uid', dataType: 'uuid', dataLength: null, dataPrecision: null, dataScale: null, nullable: 'NO', generated: true},
  })
  instanceStateUid: string;

  @property({
    type: 'number',
    required: true,
    jsonSchema: {nullable: false},
    scale: 0,
    description: "state serial number, to be set by caller",
    postgresql: {columnName: 'version', dataType: 'integer', dataLength: null, dataPrecision: null, dataScale: 0, nullable: 'NO', generated: undefined},
  })
  version: number;

  @property({
    type: 'string',
    required: true,
    jsonSchema: {nullable: false},
    
    postgresql: {columnName: 'instance_uid', dataType: 'uuid', dataLength: null, dataPrecision: null, dataScale: null, nullable: 'NO', generated: undefined},
  })
  instanceUid: string;

  @property({
    type: 'number',
    jsonSchema: {nullable: true},
    scale: 0,
    
    postgresql: {columnName: 'creator_id', dataType: 'integer', dataLength: null, dataPrecision: null, dataScale: 0, nullable: 'YES', generated: undefined},
  })
  creatorId?: number;

  @property({
    type: 'date',
    required: true,
    jsonSchema: {nullable: false},
    description: "state creation timestamp (on operation completion)",
    postgresql: {columnName: 'dt_state', dataType: 'timestamp with time zone', dataLength: null, dataPrecision: null, dataScale: null, nullable: 'NO', generated: undefined},
  })
  dtState: string;

  @property({
    type: 'boolean',
    required: true,
    jsonSchema: {nullable: false},
    description: "instance is test one",
    postgresql: {columnName: 'is_test', dataType: 'boolean', dataLength: null, dataPrecision: null, dataScale: null, nullable: 'NO', generated: undefined},
  })
  isTest: boolean;

/*   @property({
    type: 'string',
    required: true,
    jsonSchema: {nullable: false},
    length: 31,
    description: "string status (TODO: statuses lookup table)",
    postgresql: {columnName: 'status', dataType: 'character varying', dataLength: 31, dataPrecision: null, dataScale: null, nullable: 'NO', generated: undefined},
  })
  status: string; */

  @property({
    type: 'string',
    required: true,
    jsonSchema: {nullable: false},
    description: "the operation generated this state",
    postgresql: {columnName: 'instance_operation_uid', dataType: 'uuid', dataLength: null, dataPrecision: null, dataScale: null, nullable: 'NO', generated: undefined},
  })
  instanceOperationUid: string;

  @property({
    type: 'object',
    jsonSchema: {nullable: true},
    description: "any json data for trace and debug",
    postgresql: {columnName: 'instance_data', dataType: 'jsonb', dataLength: null, dataPrecision: null, dataScale: null, nullable: 'YES', generated: undefined},
  })
  instanceData?: object;

  // Define well-known properties here

  // Indexer property to allow additional data
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  [prop: string]: any;

  constructor(data?: Partial<InstanceState>) {
    super(data);
  }
}

export interface InstanceStateRelations {
  // describe navigational properties here
}

export type InstanceStateWithRelations = InstanceState & InstanceStateRelations;
